package com.thecoderscorner.menu.editorui.generator.font;

import java.awt.*;
import java.io.OutputStream;
import java.io.PrintStream;
import java.nio.ByteBuffer;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

public class TcUnicodeFont implements FontEncoder {
    private final List<TcUnicodeFontItem> items;
    private final int yAdvance;
    private final String fontName;

    public TcUnicodeFont(String name, List<TcUnicodeFontItem> items, int yAdvance) {
        this.items = items;
        this.yAdvance = yAdvance;
        this.fontName = name;
    }

    public List<TcUnicodeFontItem> getItems() {
        return items;
    }

    public int getyAdvance() {
        return yAdvance;
    }

    @Override
    public void encodeFontToStream(OutputStream stream, FontFormat fmt) {
        var ps = new PrintStream(stream);
        ps.println("// Font file generated by theCodersCorner.com Font Generator on " + LocalDateTime.now());
        ps.println("#include " + includeFileForFormat(fmt));
        ps.println();
        ps.println("const uint8_t " + fontName + "Bitmaps[] PROGMEM {");
        printByteArray(ps);
        ps.println("};");
        ps.println();
        if(fmt == FontFormat.TC_UNICODE) {
            ps.println("const UnicodeFontGlyph " + fontName + "Glyphs[] PROGMEM = {");
            int bmpOffset = 0;
            boolean first = true;
            for(var item : items) {
                if(!first) {
                    ps.println(",");
                }
                first = false;
                ps.printf("{ %d, %d, %d, %d, %d, %d, %d}", item.charNum(), bmpOffset, item.width(),
                        item.height(), item.xAdvance(), item.xOffset(), item.yOffset());
                bmpOffset += item.bitmapData().length;
            }
            ps.println();
            ps.println("};");
            ps.println();
            ps.println("const UnicodeFont " + fontName + "[] PROGMEM = {");
            ps.println("    " + fontName + "Bitmaps;");
            ps.println("    " + fontName + "Glyphs;");
            ps.println("    " + yAdvance);
            ps.println("};");
        } else {
            ps.println("const GFXglyph " + fontName + "Glyphs[] PROGMEM = {");
            int min = items.get(0).charNum();
            int max = items.stream().map(TcUnicodeFontItem::charNum).reduce(0, Integer::max);

            int bmpOffset = 0;
            boolean first = true;
            for(var item : items) {
                if(!first) {
                    ps.println(",");
                }
                first = false;
                ps.printf("    { %d, %d, %d, %d, %d, %d } /* %d */", bmpOffset, item.width(),
                        item.height(), item.xAdvance(), item.xOffset(), item.yOffset(), item.charNum);
                bmpOffset += item.bitmapData().length;
            }
            ps.println();
            ps.println("};");
            ps.println();
            ps.println("const GFXfont " + fontName + " PROGMEM = {");
            ps.println("    (uint8_t*)" + fontName + "Bitmaps;");
            ps.println("    (GFXglyph*)" + fontName + "Glyphs;");
            ps.println("    " + min + ", " + max + ",");
            ps.println("    " + yAdvance);
            ps.println("};");
        }
        ps.println();
    }

    private String includeFileForFormat(FontFormat fmt) {
        return switch (fmt) {
            case ADAFRUIT -> "<gfxfont.h>";
            case TC_UNICODE -> "<graphics/UnicodeFontHandler.h>";
        };
    }

    private void printByteArray(PrintStream ps) {
        int dataSize = items.stream().map(i -> i.bitmapData().length).reduce(0, Integer::sum);
        byte[] dataBytes = new byte[dataSize];
        int current = 0;
        for(var item : items) {
            for(int i=0; i<item.bitmapData().length; i++) {
                dataBytes[current + i] = item.bitmapData()[i];
            }
            current += item.bitmapData().length;
        }

        for(int i = 0; i< dataBytes.length; i++) {
            ps.append(String.format("0x%02x", dataBytes[i]));
            if(i != (dataBytes.length -1)) {
                ps.append(",");
            }
            else {
                ps.append("\n");
            }

            if((i%20)==19) {
                ps.append("\n");
            }
        }
    }

    public ByteBuffer encodeFontAsByteArray(FontFormat fmt) {
        throw new UnsupportedOperationException();
    }

    record TcUnicodeFontItem(int charNum, byte[] bitmapData, int width, int height, int xAdvance, int xOffset, int yOffset) {
    }
}
