plugin.name=Core display and input plugin

adafruit.manual.name=AdaFruit_GFX with manual declaration and configuration
adafruit.manual.desc=Draw menus using the AdafruitGFX library. Create the graphics variable and configure it yourself, here you just tell us the name of the variable and the type. This version works with most displays and is very configurable.

adafruit.quickstart.name=AdafruitGFX quick start for 5110, ST77xx and ILI9341
adafruit.quickstart.desc=Draw menus using AdafruitGFX library using our quick start for Nokia 5110, ST77xx and ILI9341. This version defaults many configuration options to reasonable settings, for other cases use the custom Adafruit plugin.
adafruit.quickstart.tab=Tab Type for ST7735
adafruit.quickstart.tab.desc=When using ST7735 based displays the type color of the tab usually denotes the display type
adafruit.quickstart.black.tab=Black Tab
adafruit.quickstart.green.tab=Green Tab
adafruit.quickstart.red.tab=Red Tab
adafruit.quickstart.mini.tab=Mini 160x80
adafruit.quickstart.hallowing.tab=Hallowing

adafruit.mbed.oled.name=Adafruit OLED for mbed
adafruit.mbed.oled.desc=AdafruitGFX OLED library for mbed devices. This version works with SSD1306 and SH1106 displays. You can set most parameters and there's no need to define anything in your code. See docs for library requirements.
adafruit.mbed.serial.bus=I2C or SPI Reference
adafruit.mbed.serial.bus.desc=The variable name of an I2C or SPI object
adafruit.mbed.bus.type=The type of serial bus
adafruit.mbed.bus.type.desc=The type of serial bus, either I2C or SPI

adafruit.display.rotation=Display Rotation (0..3)
adafruit.display.rotation.desc=See AdafruitGFX guide for more on rotation

#
# dfRobot shield
#
dfrobot.uno.full=Uno (less functional) or Full (8K bigger)
dfrobot.uno.full.desc=Uno (less functional/smaller) of Full functionality plugin ~8K difference
dfrobot.key.repeat=Key repeat speed in ticks (default 20)
dfrobot.key.repeat.desc=The key repeat speed for the encoder buttons
dfrobot.lcd.name=DfRobot LCD shield renderer
dfrobot.lcd.desc=Uses the LCD panel on the DfRobot shield via the LiquidCrystalIO library without needing to specify any configuration at all.
dfrobot.keys.name=DfRobot Input from shield Joystick
dfrobot.keys.desc=Uses the DfRobot shield switches to control the menu. These switches are connected to analog input A0 and will be managed by switches.

#
# Custom cases
#
custom.drawable.name=Generate Drawable for an unsupported graphical display
custom.drawable.desc=Allows you to write your own custom Drawable that interfaces to an unsupported display, kind of like fill in the blanks. See the documentation link.
complete.custom.display.name=Completely custom rendering starting from scratch
complete.custom.display.desc=Advanced library usage (prefer customDrawable for most graphical drivers). This allows you to write a custom renderer from scratch, see the documentation link.
complete.custom.header=Header File Name
complete.custom.header.desc=Header file needed for compilation
complete.custom.class.name=Rendering Class name within header
complete.custom.class.name.desc=Name of the ready prepared rendering class in that header

#
# Java cases
#
java.includes.openjfx=My JDK includes OpenJFX
java.includes.openjfx.desc=If your JDK already has the OpenJFX libraries included, EG Liberica

#
# Core values used by all entries in plugin
#
core.display.variable=Display Variable
core.display.variable.desc=Name of the display variable exactly as declared in sketch
core.display.variable.type=Display variable type
core.display.variable.type.desc=Type of the AdaGfx display variable (quick start declares for you, otherwise as declared in sketch)
core.display.config=Display config (normally left blank)
core.display.config.desc=Legacy setting left for those not moving to themes
core.display.is.buffered=Display is buffered in memory (EG OLED)
core.display.is.buffered.desc=If the display library is memory buffered
core.display.width=Display Width
core.display.width.desc=Pixel width of hardware
core.display.height=Display Height
core.display.height.desc=Pixel height of hardware
core.reset.pin=Optional Reset Pin
core.reset.pin.desc=Option the pin on which Reset is connected
core.cs.pin=CS Pin (SPI only)
core.cs.pin.desc=Option the pin on which CS is connected
core.rs.pin=RS Pin (SPI only)
core.rs.pin.desc=Option the pin on which RS is connected
core.option.data.pin=Data Pin (SW SPI only)
core.option.data.pin.desc=Optionally specify the data pin for SW SPI
core.option.clock.pin=Clock Pin (SW SPI only)
core.option.clock.pin.desc=Optionally specify the clock pin for SW SPI
core.screen.updates.sec=Screen updates per second
core.screen.updates.sec.desc=Number of screen updates per second, ensure it divides by 1000
core.display.buffer.size=Lines to buffer (performance increase) (about 40-80 bytes a line)
core.display.buffer.size.desc=High performance, draws items into a memory buffer and then writes the result optimally on the TFT