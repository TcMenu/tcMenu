plugin.name=Core display and input plugin

adafruit.manual.name=AdaFruit_GFX with manual declaration and configuration
adafruit.manual.desc=Draw menus using the AdafruitGFX library. Create the graphics variable and configure it yourself, here you just tell us the name of the variable and the type. This version works with most displays and is very configurable.

adafruit.quickstart.name=AdafruitGFX quick start for 5110, ST77xx and ILI9341
adafruit.quickstart.desc=Draw menus using AdafruitGFX library using our quick start for Nokia 5110, ST77xx and ILI9341. This version defaults many configuration options to reasonable settings, for other cases use the custom Adafruit plugin.
adafruit.quickstart.tab=Tab Type for ST7735
adafruit.quickstart.tab.desc=When using ST7735 based displays the type color of the tab usually denotes the display type
adafruit.quickstart.black.tab=Black Tab
adafruit.quickstart.green.tab=Green Tab
adafruit.quickstart.red.tab=Red Tab
adafruit.quickstart.mini.tab=Mini 160x80
adafruit.quickstart.hallowing.tab=Hallowing

adafruit.mbed.oled.name=Adafruit OLED for mbed
adafruit.mbed.oled.desc=AdafruitGFX OLED library for mbed devices. This version works with SSD1306 and SH1106 displays. You can set most parameters and there's no need to define anything in your code. See docs for library requirements.
adafruit.mbed.serial.bus=I2C or SPI Reference
adafruit.mbed.serial.bus.desc=The variable name of an I2C or SPI object
adafruit.mbed.bus.type=The type of serial bus
adafruit.mbed.bus.type.desc=The type of serial bus, either I2C or SPI

adafruit.display.rotation=Display Rotation (0..3)
adafruit.display.rotation.desc=See library guide for more on rotation

#
# dfRobot shield
#
dfrobot.uno.full=Uno (less functional) or Full (8K bigger)
dfrobot.uno.full.desc=Uno (less functional/smaller) of Full functionality plugin ~8K difference
dfrobot.key.repeat=Key repeat speed in ticks (default 20)
dfrobot.key.repeat.desc=The key repeat speed for the encoder buttons
dfrobot.lcd.name=DfRobot LCD shield renderer
dfrobot.lcd.desc=Uses the LCD panel on the DfRobot shield via the LiquidCrystalIO library without needing to specify any configuration at all.
dfrobot.keys.name=DfRobot Input from shield Joystick
dfrobot.keys.desc=Uses the DfRobot shield switches to control the menu. These switches are connected to analog input A0 and will be managed by switches.
dfrobot.use.right.as.sel=Use the right button as select (free up select)
dfrobot.use.right.as.sel.desc=Use the right button as the select key, freeing up select for other purposes.

#
# UpDown buttons
#
updown.button.name=Control menu with UP/DOWN/OK buttons
updown.button.desc=Switches that represent up, down and OK controlled by switches library. These are fully debounced either pull up or pull down switches and can either be connected direct to Arduino or via an i2c expander.

#
# Custom cases
#
custom.drawable.name=Generate Drawable for an unsupported graphical display
custom.drawable.desc=Allows you to write your own custom Drawable that interfaces to an unsupported display, kind of like fill in the blanks. See the documentation link.
complete.custom.display.name=Completely custom rendering starting from scratch
complete.custom.display.desc=Advanced library usage (prefer customDrawable for most graphical drivers). This allows you to write a custom renderer from scratch, see the documentation link.
complete.custom.header=Header File Name
complete.custom.header.desc=Header file needed for compilation
complete.custom.class.name=Rendering Class name within header
complete.custom.class.name.desc=Name of the ready prepared rendering class in that header

#
# UpDown buttons
#
updown.encoder.up.pin=Up Button Pin
updown.encoder.up.pin.desc=The pin on which the UP button is connected
updown.encoder.down.pin=Down Button Pin
updown.encoder.down.pin.desc=The pin on which the DOWN button is connected
updown.encoder.left.pin=Left/Back Button Pin (-1 off)
updown.encoder.left.pin.desc=Left or back button pin connection, or -1 for none
updown.encoder.right.pin=Right/Next Button Pin (-1 off)
updown.encoder.right.pin.desc=Right or next button pin connection, or -1 for none
updown.encoder.ok.pin=OK Button Pin (-1 means RIGHT is OK)
updown.encoder.ok.pin.desc=The pin on which OK is connected, when -1 right becomes OK

#
# LCD cases
#
lcd.char.width=Lcd Width
lcd.char.width.desc=Number of characters across the LCD
lcd.char.height=Lcd Height
lcd.char.height.desc=Number of rows on the LCD
lcd.io.device=LCD IO Device (default blank)
lcd.io.device.desc=This allows you to provide an IoAbstractionRef if your display is on a non-standard IO expander
lcd.backlight.pin=Optional Backlight Pin
lcd.backlight.pin.desc=Optional backlight pin or -1 for none
lcd.pwm.contrast.pin=Optional PWM Contrast Pin
lcd.pwm.contrast.pin.desc=Optional contrast  pin or -1 for none, see documentation link
lcd.i2c.addr=I2C Address
lcd.i2c.addr.desc=Address on which the display responds
lcd.pin.layout=LCD Pin Layout
lcd.pin.layout.desc=How pins are arranged on your backpack
lcd.wire.variable=I2C (Wire) Variable
lcd.wire.variable.desc=The name of the I2C instance to use (default Wire)

#
# SSD1306ascii
#
ssd1306ascii.name=Custom SSD1306ASCII Plugin for manual configuration
ssd1306ascii.desc=SSD1306ASCII uses the greiman SSD1306Ascii from github to generate a low memory display renderer for OLED devices using a fixed width font. Commercial use caution: underlying SSD1306Ascii library is GPL
ssd1306ascii.char.width=Number of characters horizontally
ssd1306ascii.char.width.desc=The number of characters across the display
ssd1306ascii.item.font=Monospace Font for items
ssd1306ascii.item.font.desc=The font that is used to render menu items
ssd1306ascii.title.font=Font for the title
ssd1306ascii.title.font.desc=The font that is used to render the title

#
# Frame buffer / LTDC
#
ltdc.driver.name=STM32 LTDC frame buffer (optional touch) using BSP functions
ltdc.driver.desc=Uses the ST Microelectronics BSP driver for the LTDC display buffer, and optionally the BSP touch screen support if needed. This driver is for STM32 boards only when using mbed or Stm32Duino and requires considerable configuration.

#
# ESP32 touch sensor
#
esp32.sensor.name=Use ESP32 touch pad sensors for input
esp32.sensor.desc=Interfaces with the ESP32 touch pad sensors to use them as buttons with switches, either interrupt based or polled mode is supported.
esp32.sensor.threshold=Switch activation threshold
esp32.sensor.threshold.desc=Point above/below which the switch is considered pressed
esp32.sensor.threshold.mode=Threshold activation mode 
esp32.sensor.threshold.mode.desc=If the trigger is for below or above the threshold value
esp32.sensor.low.voltage=Low voltage setting
esp32.sensor.low.voltage.desc=The low voltage setting to use for the touch pad
esp32.sensor.high.voltage=High voltage setting
esp32.sensor.high.voltage.desc=The high voltage setting to use for the touch pad
esp32.sensor.attenuation=Attenuation setting
esp32.sensor.attenuation.desc=The attenuation setting to use for the touch pad
esp32.sensor.up=Up Sensor Num
esp32.sensor.up.desc=The touch sensor for UP
esp32.sensor.down=Down Sensor Num
esp32.sensor.down.desc=The touch sensor for DOWN
esp32.sensor.left=Left Sensor Num (-1 off)
esp32.sensor.left.desc=The touch sensor for LEFT or -1 for none
esp32.sensor.right=Right Sensor Num (-1 off)
esp32.sensor.right.desc=The touch sensor for RIGHT or -1 for none
esp32.sensor.sel=Select Sensor Num (-1 use RIGHT)
esp32.sensor.sel.desc=The sensor for select or if -1, right will be used as select

#
# Java cases
#
java.includes.openjfx=My JDK includes OpenJFX
java.includes.openjfx.desc=If your JDK already has the OpenJFX libraries included, EG Liberica

#
# Touch screens
#
touch.res.xp=X+ pin
touch.res.xn=X- pin (must be ADC)
touch.res.yp=Y+ pin (must be ADC)
touch.res.yn=Y- pin
touch.res.xp.desc=Set to X+ pin
touch.res.xn.desc=Set to X- pin, must be an ADC pin
touch.res.yp.desc=Set to Y+ pin, must be an ADC pin
touch.res.yn.desc=Set to Y- pin
touch.res.name=Resistive touch screen on analog inputs
touch.res.desc=Resistive touch screen panel that is attached to the display, this driver handles direct connection to analog pins on the device, must be used with a graphical renderer.
touch.lib.name=FT6206/XPT2046 touch screen plugin that provides integration with library
touch.lib.desc=FT6206/XPT2046 touchscreen plugins that integrates with either Adafruit's FT6206 or Paul Stoffregen's XPT2046 library. Works with a wide range of touch screens.
touch.lib.prop=Touch Library (must be installed)
touch.lib.prop.desc=The touch library that supports the touch device, library must be installed
touch.tft.use.raw=Use the TFT_eSPI raw function
touch.tft.use.raw.desc=Use the raw function call to acquire the uncalibrated value from TFTeSPI library
touch.tft.calib.width=Maximum width reported by touch function
touch.tft.calib.width.desc=The maximum width that would be reported when calling the TFT_eSPI touch functions
touch.tft.calib.height=Maximum height reported by touch function
touch.tft.calib.height.desc=The maximum height that would be reported when calling the TFT_eSPI touch functions

#
# U8G2 displays
#
u8g2.yield.callback=Improve latency of I2C calls with custom byte callback
u8g2.yield.callback.desc=Overrides byte callback calling yieldForMicros frequently to improve latency, you must call Wire.begin() yourself
u8g2.enable.utf8=Turn on support for UTF-8
u8g2.enable.utf8.desc=When true we'll call into U8G2 using UTF8 functions, otherwise we'll use regular print

#
# Core values used by all entries in plugin
#
core.display.variable=Display Variable
core.display.variable.desc=Name of the display variable exactly as declared in sketch
core.display.variable.auto.desc=Name of the display variable that will be created
core.display.variable.type=Display variable type
core.display.variable.type.desc=Type of the AdaGfx display variable (quick start declares for you, otherwise as declared in sketch)
core.display.config=Display config (normally left blank)
core.display.config.desc=Legacy setting left for those not moving to themes
core.display.is.buffered=Display is buffered in memory (EG OLED)
core.display.is.buffered.desc=If the display library is memory buffered
core.display.width=Display Width
core.display.width.desc=Pixel width of hardware
core.display.height=Display Height
core.display.height.desc=Pixel height of hardware
core.reset.pin=Optional Reset Pin
core.reset.pin.desc=Option the pin on which Reset is connected
core.cs.pin=CS Pin (SPI only)
core.cs.pin.desc=Option the pin on which CS is connected
core.rs.pin=RS/DC Pin (SPI only)
core.rs.pin.desc=Option the pin on which RS/DC is connected
core.option.data.pin=Data Pin (SW SPI/I2C only)
core.option.data.pin.desc=Optionally specify the data pin for SW SPI/I2C
core.option.clock.pin=Clock Pin (SW SPI/I2C only)
core.option.clock.pin.desc=Optionally specify the clock pin for SW SPI/I2C
core.screen.updates.sec=Screen updates per second
core.screen.updates.sec.desc=Number of screen updates per second, ensure it divides by 1000
core.display.buffer.size=Lines to buffer (performance increase) (about 40-80 bytes a line)
core.display.buffer.size.desc=Higher performance and less flicker, draws items into a memory buffer and then writes the result optimally on the TFT (Aka Sprite height)
core.input.polling=Polling / Interrupt mode
core.input.polling.desc=Choose how switches should poll / use interrupts
core.input.polling.all=Polling for keys and encoders
core.input.polling.none=Everything interrupt driven
core.input.polling.keys=Keys polling, encoder A pin interrupt
core.switch.io.device=IoAbstractionRef for Switches
core.switch.io.device.desc=This allows you to provide an IoAbstractionRef if your input is on an IO expander
core.key.repeat.speed=Key repeat speed in ticks (default 20)
core.key.repeat.speed.desc=The key repeat speed for the encoder buttons
core.pullup.logic=PullUp Logic
core.pullup.logic.desc=Enable this to use pull up logic, otherwise pull down
core.no.display=No display required
core.no.display.desc=Select this when you either want to use your own display technology, or there is no display on the embedded device.
core.no.input=No input required
core.no.input.desc=Select this option when there are no local input facilities, or the input is combined with the display plugin.
core.touch.separator=Optional Touch settings
core.touch.separator.desc=Optional Settings for library provided touch controller
core.touch.required=Touch screen required
core.touch.required.desc=Set to true to enable the touch screen support
core.touch.orientation=Touch Orientation
core.touch.orientation.desc=Optional Touch Orientation Settings
core.touch.swap.xy=Switch orientation from X,Y to Y,X
core.touch.swap.xy.desc=Swaps over the orientation of the touch screen from X,Y to Y,X if needed
core.touch.x.inverted=Invert values in raw X dimension
core.touch.x.inverted.desc=Invert the raw X plane on the touch screen (before applying orientation)
core.touch.y.inverted=Invert values in raw Y dimension
core.touch.y.inverted.desc=Invert the raw Y plane on the touch screen (before applying orientation)
core.touch.calibration=Optional Touch Calibration
core.touch.calibration.desc=Optional Calibration Settings
core.enable.touch.calib=Enable touch calibration
core.enable.touch.calib.desc=Enable the internal touch calibration, includes calibration UI
core.touch.calib.addr=Calibration EEPROM storage location
core.touch.calib.addr.desc=The location in EEPROM to start storing calibration data

#
# Two Button switch input plugin
#
two.button.name=Control menu with only two buttons
two.button.desc=Use this option when you only have two inputs available for buttons, holding up acts as back, holding down acts as OK
